# -*- coding: utf-8 -*-
"""movies_popularity.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XEEA-y_UNZ1t9II59qZk34_-oaGWPcos
"""

import pandas as pd

from google.colab import files
uploaded = files.upload()

import io
links_df = pd.read_csv(io.BytesIO(uploaded['links.csv']))
movies_df = pd.read_csv(io.BytesIO(uploaded['movies.csv']))
ratings_df = pd.read_csv(io.BytesIO(uploaded['ratings.csv']))
tags_df = pd.read_csv(io.BytesIO(uploaded['tags.csv']))

links_df.columns

movies_df.columns

ratings_df.columns

tags_df.columns

ratings_mc_df=ratings_df.groupby("movieId")["rating"].agg(["mean","count"]).reset_index()
ratings_mc_df

ratings_mc_df.sort_values(by=['count', 'mean'], ascending=False).head()

ratings_mc_df["overall_rating"] = (ratings_mc_df["mean"]*2) + (ratings_mc_df["count"]*0.01)
ratings_mc_df

ratings_mc_df.sort_values(by=['overall_rating'], ascending=False).head()

ratings_mc_df_merged=ratings_mc_df.merge(
    movies_df,
    on="movieId",
    how="inner"
)
ratings_mc_merged_df = ratings_mc_df_merged[["movieId","title","genres", "mean", "count", "overall_rating"]]

#n = 3 for example top 3 films
#create function
def get_top_n(ratings_mc_merged_df, n):
  top_n_movies_df=pd.DataFrame(ratings_mc_merged_df).nlargest(n,"overall_rating")
  return top_n_movies_df

get_top_n(ratings_mc_merged_df, 4)